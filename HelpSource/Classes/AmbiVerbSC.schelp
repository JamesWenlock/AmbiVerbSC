/* 
<AmbiVerbSC - James Wenlock>
Center for Digital Arts and Experimental Media, University of Washington - https://dxarts.washington.edu/
   
   Copyright (C) <2017>  <James Wenlock>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/

TITLE:: AmbiVerbSC
summary:: Ambisonic tank reverb with coupling
categories:: Ambisonics

DESCRIPTION::
An ambisonic tank reverb with coupling. See link::Tutorials/AmbiVerbTutorial::.

CLASSMETHODS::

METHOD:: ar

argument::in
incoming signal

argument::mix
mix of wet and dry signal (1 = wet, 0 = dry)

argument::preDelay
time between wet and dry signal

argument::crossoverFreq
frequency low and high shelf cross

argument::lowRT
ring time of low shelf

argument::highRT
ring time of high shelf

argument::dispersion

argument::size

argument::timeModWidth
amount of delay time modulation

argument::timeModRate
rate of delay time modulation

argument::coupRate

argument::coupAmt

argument::phaseRotRate

argument::phaseRotAmt

argument::orientation
orientation of the tetrahedron used from A<>B format conversion

argument::maxPreDelay

argument::feedbackSpread

argument::decay
amount of time reflections fade
=======
argument:: in

incoming signal

argument:: mix

mix of wet and dry signal (1 = wet, 0 = dry)

argument:: preDelay

time between wet and dry signal in seconds

argument:: crossoverFreq

crossover frequency of low and high shelf filters

argument:: lowRT

amount of time low shelf filter feedback takes to fade in seconds

argument:: highRT

amount of time high shelf filter feedback takes to fade in seconds

argument:: dispersion

controls delay times of allpass reverberators, aka amount of smearing in time
(1 = 100% dispersion, 0 = 0% dispersion)

argument:: size

controls maximum allpass delay times and number of allpass filters, aka reflection qualities of space. see below for accepted symbols

argument:: timeModWidth

scales maximum amount allpass reverberator delay times modulated (1 = maximum modulation, 0 = no modulation)

argument:: timeModeRate

rate at which allpass reverberators modulated (in hz)

argument:: coupRate

rate at which RTT couples signal in feedback loop (in hz)

argument:: coupAmt

amount RTT couples signal in feedback loop (in degrees, rotation = +- theta)

argument:: phaseRotRate

rate at which Hilbert phase rotation is applied to A format signal in feedback loop

argument:: phaseRotAmt

amount of Hilbert phase rotation applied to A format signal in feedback loop (in degrees)

argument:: orientation

defines initial orientation of A-format signal (see link::Classes/FoaDecoderMatrix#newBtoA:: for list of tetrahedral positions)

argument:: maxPreDelay

defines maximum amount of pre-delay

argument:: feedbackSpread

controls amount of time between feedback loop iterations (0 = min time, 1 = max time)

returns::
An UGen.

EXAMPLES::

code::
// Opens AmbiVerbGUI, s defines server

AmbiVerbGUI(s);
::

code::
(
// Adapted from B-format Sound File Binaural Decoder Code
// Plays Default Ambiverb Decoded with a binaural (HRTF) decoder

var cond, decoder, sndbuf, synth;
s.options.memSize_(2**20);

// boot the server
s.boot;

// wait for the server to boot
cond = Condition.new;
s.waitForBoot({


    Routine.run({

        // define a binaural decoder
        decoder = FoaDecoderKernel.newListen(1013);

        // load sound file into a buffer
        sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Pampin-On_Space.wav");

        s.sync(cond);

        // synth to decode our B-format sound file
        SynthDef(\kernelDecode, {arg buffer;
            var out, src;

            // play B-format sound file
            src = PlayBuf.ar(sndbuf.numChannels, buffer, BufRateScale.kr(buffer), loop: 1);
			src = AmbiVerbSC.ar(src);
            // decode using decoder
            out = FoaDecode.ar(src, decoder);


            Out.ar(0, out);
        }).add;

        s.sync(cond);

        synth = Synth(\kernelDecode, [\buffer, sndbuf]);

        // press command period when done
        CmdPeriod.doOnce({
            synth.free;
            decoder.free;
            sndbuf.free
        });
    })
})
)

::
