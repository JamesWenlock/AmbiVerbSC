TITLE:: AmbiVerbSC
summary:: Ambisonic tank reverb with coupling
categories:: Ambisonics

DESCRIPTION::
An ambisonic tank reverb with coupling. See link::Tutorials/AmbiVerbTutorial:: for details.

warning::
A SynthDef can only have two LocalIn/LocalOut pairings â€” one for control rate and one for audio rate. AmbiVerbSC uses local in and out! Note that AmbiVerbSC's internal feedback loop could interfere with other feedback loops. Use additional LocalIns and Outs with caution!
::

CLASSMETHODS::

METHOD:: ar

argument:: in

Incoming signal.

argument:: mix

Mix of wet and dry signal (1 = wet, 0 = dry).

argument:: preDelay

Time between wet and dry signal in seconds.

argument:: crossoverFreq

Crossover frequency of low and high shelf filters.

argument:: lowRT

Amount of time low shelf filter feedback takes to reach -60db (in seconds).

argument:: highRT

Amount of time high shelf filter feedback takes to reach -60db (in seconds).

argument:: dispersion

Controls delay times of allpass reverberators, aka amount of smearing in time.
(1 = 100% dispersion, 0 = 0% dispersion)

argument:: size

Controls maximum allpass delay times and number of allpass filters, aka reflection qualities of space. Defined as string. See below for accepted arguments..
LIST::
##"cubeXS"
##"cubeS"
##"cubeM"
##"cubeL"
##"cubeXL"
##"doublecubeXS"
##"doublecubeS"
##"doublecubeM"
##"doublecubeL"
##"doublecubeXL"
##"shoeboxXS"
##"shoeboxS"
##"shoeboxM"
##"shoeboxL"
##"shoeboxXL"
::

WARNING::
Size is a hardcoded parameter. It cannnot be modulated.
::

argument:: timeModWidth

Scales maximum amount allpass reverberator delay times modulated (1 = maximum modulation, 0 = no modulation).

argument:: timeModRate

Rate at which allpass reverberators modulated (in hz).

argument:: coupRate

Rate at which RTT couples signal in feedback loop (in hz).

argument:: coupAmt

Amount RTT couples signal in feedback loop (in radians, rotation = +- theta).

argument:: phaseRotRate

Rate at which Hilbert phase rotation is applied in feedback loop.

argument:: phaseRotAmt

Amount of Hilbert phase rotation applied in feedback loop (in radians).

argument:: orientation

Defines initial orientation of A-format signal (see link::Classes/FoaDecoderMatrix#newBtoA:: for list of tetrahedral positions).

WARNING::
Orientation is a hardcoded parameter. It cannnot be modulated.
::

argument:: maxPreDelay

Defines maximum amount of pre-delay.

WARNING::
maxPreDelay is a hardcoded parameter. It cannnot be modulated.
::

argument:: feedbackSpread

Controls amount of time between feedback loop iterations (0 = min time, 1 = max time).

returns::
An UGen.

EXAMPLES::


code::
// Opens AmbiVerbGUI
// s = default server

AmbiVerbGUI(s);
::

code::
// Example for rendering AmbiVerSC with presets using CTK  
(
var score, synths, buffer, path, paramDict, preset, sampleRate, sampleFormat, headerFormat;
score = CtkScore.new;

// Set path
path = "/Users/dxlocal/Library/Application Support/ATK/sounds/b-format/Hodges-Purcell.wav";
SoundFile.use(path, {arg soundFile;
	sampleRate = soundFile.sampleRate;
	sampleFormat = soundFile.sampleFormat;
});
headerFormat = 'WAV';
buffer = CtkBuffer(path).addTo(score);

// Select preset
preset = nil;
// preset = "high verb";

// If nil select params
preset.notNil.if({
	paramDict = Object.readArchive(Platform.userAppSupportDir ++ "/downloaded-quarks/AmbiVerbSC/Data/Presets/" ++ preset.asString ++ ".txt");
}, {
	paramDict = Dictionary.newFrom([
		'mix', 1.0,
		'preDelay', 0,
		'crossoverFreq', 3000,
		'lowRT', 4.2,
		'highRT', 1.2,
		'dispersion', 1,
		'size', 'cubeS',
		'modWidth', 0.2,
		'modRate', 0.5,
		'coupRate', 0.5,
		'coupAmt', 6pi,
		'phaseRotRate', 0.4,
		'phaseRotAmt', 2pi,
		'orientation', 'flu',
		'maxPreDelay', 10,
		'feedbackSpread', 1
	])
});

paramDict.postln;

synths = CtkProtoNotes(
	SynthDef('ambiverb', {
		arg buffer, mix = 1, preDelay = 0, crossoverFreq = 3000,
		lowRT = 10, highRT = 7, dispersion = 1,
		modWidth = 0.2, modRate = 0.3, coupRate = 0.5,
		coupAmt = 6pi, phaseRotRate = 0.4, phaseRotAmt = 2pi, feedbackSpread = 1;
		var sig, reverb, size = paramDict['size'], orientation  = \flu;

		sig = PlayBuf.ar(4, buffer, BufRateScale.kr(buffer));

		reverb = AmbiVerbSC.ar(sig, mix, 0, crossoverFreq,
			lowRT, highRT, dispersion, size,
			modWidth, modRate, coupRate,
			coupAmt, phaseRotRate, phaseRotAmt,
			orientation, 10, feedbackSpread);

		Out.ar(0, reverb)
	})
);

score.add(
	synths['ambiverb'].note(0.0, buffer.duration + 10)
	.buffer_(buffer)
	.mix_(paramDict['mix'])
	.preDelay_(paramDict['preDelay'])
	.crossoverFreq_(paramDict['crossoverFreq'])
	.lowRT_(paramDict['lowRT'])
	.highRT_(paramDict['highRT'])
	.dispersion_(paramDict['dispersion'])
	.modWidth_(CtkControl.env(Env([0.1, paramDict['modWidth']], [buffer.duration], \sin)))
	.modRate_(CtkControl.env(Env([0.1, paramDict['modRate']], [buffer.duration], \sin)))
	.coupRate_(paramDict['coupRate'])
	.coupAmt_(paramDict['coupAmt'])
	.phaseRotRate_(paramDict['phaseRotRate'])
	.phaseRotAmt_(paramDict['phaseRotAmt'])
	.feedbackSpread_(paramDict['feedbackSpread'])
);

// IMPORTANT (enough memory must be allocated in order for score to render!!)
score.write(
	path.splitext[0] ++ preset ++ ".wav",
	sampleFormat: sampleFormat,
	headerFormat: headerFormat,
	sampleRate: sampleRate,
	options: ServerOptions.new.numOutputBusChannels_(4).memSize_(2**21)
)
)

code::
(
// Adapted from B-format Sound File Binaural Decoder Code
// Plays Default Ambiverb Decoded with a binaural (HRTF) decoder

var cond, decoder, sndbuf, synth;
s.options.memSize_(2**20);

// boot the server
s.boot;

// wait for the server to boot
cond = Condition.new;
s.waitForBoot({


    Routine.run({

        // define a binaural decoder
        decoder = FoaDecoderKernel.newListen(1013);

        // load sound file into a buffer
        sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Pampin-On_Space.wav");

        s.sync(cond);

        // synth to decode our B-format sound file
        SynthDef(\kernelDecode, {arg buffer;
            var out, src;

            // play B-format sound file
            src = PlayBuf.ar(sndbuf.numChannels, buffer, BufRateScale.kr(buffer), loop: 1);
			src = AmbiVerbSC.ar(src);
            // decode using decoder
            out = FoaDecode.ar(src, decoder);


            Out.ar(0, out);
        }).add;

        s.sync(cond);

        synth = Synth(\kernelDecode, [\buffer, sndbuf]);

        // press command period when done
        CmdPeriod.doOnce({
            synth.free;
            decoder.free;
            sndbuf.free
        });
    })
})
)
::
